#!/usr/bin/env python3

import click
import yaml


# Properly indent the dumped yaml output
class IndentedDumper(yaml.Dumper):
    def increase_indent(self, flow=False, *args, **kwargs):
        return super().increase_indent(flow=flow, indentless=False)


def get_source(config, id):
    sources = config["plugins"]["sources"]
    for source in sources:
        if source["id"] == id:
            return source
    return None


def get_config(workspace):
    path = workspace + "/.trunk/trunk.yaml"
    with open(path, "r+") as trunk_file:
        config = yaml.load(trunk_file, Loader=yaml.FullLoader)
        return config


@click.group()
def cli():
    pass


@cli.command()
@click.argument("workspace")
def notify(workspace):
    config = get_config(workspace)
    source = get_source(config, "trunk")
    if source is None:
        print("'trunk' repo not found in plugins list. nothing to toggle")
        exit(1)

    has_local = "local" in source.keys()

    if not has_local:
        notifications = {
            "notifications": [
                {
                    "id": "toggle-local",
                    "title": "Use Local",
                    "message": "Set trunk.yaml to use local plugin code\n",
                    "commands": [{"run": "trunk run toggle-local -- --local"}],
                }
            ]
        }
    else:
        notifications = {
            "notifications": [
                {
                    "id": "toggle-local",
                    "title": "Use Remote",
                    "message": "Set trunk.yaml to use remote plugin code",
                    "commands": [{"run": "trunk run toggle-local -- --remote"}],
                }
            ]
        }
    output = yaml.dump(notifications, sort_keys=False)
    print(output)
    exit(0)


@cli.command(context_settings={"ignore_unknown_options": True})
@click.argument("workspace")
@click.option("--local", is_flag=True, default=False, help="Force toggle to local")
@click.option("--remote", is_flag=True, default=False, help="Force toggle to remote")
@click.option(
    "--pre-push", is_flag=True, default=False, help="Running as part of pre-push"
)
@click.option("--dry-run", is_flag=True, help="Dry run of toggle operation")
def flip(workspace, local, remote, pre_push, dry_run):
    if local and remote:
        print("Cannot set both 'remote' and 'local' to true")
        exit(1)

    path = workspace + "/.trunk/trunk.yaml"
    with open(path, "r+") as trunk_file:
        config = yaml.load(trunk_file, Loader=yaml.FullLoader)
        source = get_source(config, "trunk")
        if source is None:
            print("'trunk' repo not found in plugins list. nothing to toggle")
            exit(1)

        has_local = "local" in source.keys()
        if local:
            set_local = True
        elif remote:
            set_local = False
        elif not local and not remote:
            # If the local key exists remove it else add it
            set_local = not has_local

        modified = False
        if set_local and not has_local:
            source["local"] = workspace
            modified = True
        if not set_local and has_local:
            del source["local"]
            modified = True

        output = yaml.dump(config, sort_keys=False, Dumper=IndentedDumper)
        if dry_run:
            if modified:
                print(output)
            else:
                print("no changes made")
            exit(0)

        if not modified:
            # Nothing changed
            exit(0)

        trunk_file.seek(0)
        trunk_file.write(output)
        trunk_file.truncate()

        # If in pre-push and modified content (return 1)
        if modified and pre_push:
            print("Clearing 'local' key from plugin repo.")
            exit(1)
        else:
            exit(0)


if __name__ == "__main__":
    cli()
