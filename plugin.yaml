version: 0.1
required_trunk_version: ">=0.17.0-beta.7"

actions:
  definitions:
    - id: commitlint
      runtime: node
      packages_file: actions/commitlint/package.json
      run: commitlint --edit ${1}
      triggers:
        - git_hooks: [commit-msg]

    - id: git-lfs
      display_name: Git LFS
      description: Git LFS hooks
      run: git lfs "${hook}" "${@}"
      triggers:
        - git_hooks: [post-checkout, post-commit, post-merge, pre-push]

    - id: trunk-announce
      display_name: Trunk Announce
      description: Git hook for displaying commits tagged with '/trunk announce'
      run: trunk show-announcements "${hook}" "${@}"
      triggers:
        - git_hooks: [post-checkout, post-merge, pre-rebase]
      notify_on_error: false

    - id: trunk-cache-prune
      display_name: Trunk Cache Prune
      description: Periodically prune cached trunk files that are no longer needed
      triggers:
        - schedule: 24h
      run: trunk cache prune
      notify_on_error: false

    - id: trunk-fmt-pre-commit
      description: Run 'trunk fmt' whenever you run 'git commit'
      display_name: Trunk Fmt Pre-Commit Hook
      run: trunk fmt -t "git-commit" --index-file '${env.GIT_INDEX_FILE}' --upstream=HEAD
      interactive: true
      triggers:
        - git_hooks: [pre-commit]
      notify_on_error: false

    - id: trunk-check-pre-push
      display_name: Trunk Check Pre-Push Hook
      description: Run 'trunk check' whenever you run 'git push'
      run: trunk check -n -t git-push --commit-ref-from-pre-push '${hook_stdin_path}'
      interactive: true
      triggers:
        - git_hooks: [pre-push]
      notify_on_error: false

lint:
  definitions:
    # Inserts "#pragma once" if it wasn't there
    - name: pragma-once
      files: [c-header, c++-header]
      commands:
        - output: rewrite
          run: ${plugin}/linters/pragma-once/fix.sh ${target}
          formatter: true
          batch: false
          success_codes: [0]

    - name: codespell
      files: [ALL]
      runtime: python
      package: codespell
      commands:
        - output: sarif
          run: codespell ${target}
          success_codes: [0, 65]
          read_output_from: stdout
          parser:
            runtime: python
            run: ${plugin}/linters/codespell/codespell_to_sarif.py
          batch: true
          cache_results: true

    - name: sqlfluff
      files: [sql]
      runtime: python
      package: sqlfluff
      commands:
        - output: sarif
          run: sqlfluff lint ${target} --format json --dialect ansi --nofail
          success_codes: [0]
          read_output_from: stdout
          parser:
            runtime: python
            run: ${plugin}/linters/sqlfluff/sqlfluff_to_sarif.py

    - name: cspell
      files: [ALL]
      runtime: node
      package: cspell
      commands:
        - output: regex
          parse_regex: ((?P<path>.*):(?P<line>\d+):(?P<col>\d+) - (?P<message>.*))
          run: cspell --no-progress --no-summary --show-suggestions ${target}
          batch: true
          read_output_from: stdout
          success_codes: [0, 1]
          cache_results: false
      direct_configs:
        - .cspell.json
        - cspell.json
        - .cSpell.json
        - cSpell.json
        - cspell.config.js
        - cspell.config.cjs
        - cspell.config.json
        - cspell.config.yaml
        - cspell.config.yml
        - cspell.yaml
        - cspell.yml
      affects_cache:
        - package.json
      known_good_version: 6.5.0
      version_command:
        parse_regex: ${semver}
        run: cspell --version
