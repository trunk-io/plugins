// Jest Snapshot v1, https://goo.gl/fbAQLP
// trunk-upgrade-validation:RELEASE

exports[`Testing linter squawk test basic 1`] = `
{
  "issues": [
    {
      "code": "prefer-robust-stmts",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "1",
      "linter": "squawk",
      "message": "Consider wrapping in a transaction or adding a IF NOT EXISTS clause if the statement supports it.",
      "targetType": "sql",
    },
    {
      "code": "prefer-big-int",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "2",
      "linter": "squawk",
      "message": "Hitting the max 32 bit integer is possible and may break your application. Use 64bit integer values instead to prevent hitting this limit.",
      "targetType": "sql",
    },
    {
      "code": "prefer-bigint-over-int",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "2",
      "linter": "squawk",
      "message": "Hitting the max 32 bit integer is possible and may break your application. Use 64bit integer values instead to prevent hitting this limit.",
      "targetType": "sql",
    },
    {
      "code": "prefer-identity",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "2",
      "linter": "squawk",
      "message": "Serial types have confusing behaviors that make schema management difficult. Use identity columns instead for more features and better usability.",
      "targetType": "sql",
    },
    {
      "code": "prefer-text-field",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "3",
      "linter": "squawk",
      "message": "Changing the size of a varchar field requires an ACCESS EXCLUSIVE lock. Use a text field with a check constraint.",
      "targetType": "sql",
    },
    {
      "code": "prefer-robust-stmts",
      "column": "2",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "5",
      "linter": "squawk",
      "message": "Consider wrapping in a transaction or adding a IF NOT EXISTS clause if the statement supports it.",
      "targetType": "sql",
    },
    {
      "code": "require-concurrent-index-creation",
      "column": "2",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "5",
      "linter": "squawk",
      "message": "Creating an index blocks writes. Create the index CONCURRENTLY.",
      "targetType": "sql",
    },
    {
      "code": "disallowed-unique-constraint",
      "column": "2",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "7",
      "linter": "squawk",
      "message": "Adding a UNIQUE constraint requires an ACCESS EXCLUSIVE lock which blocks reads. Create an index CONCURRENTLY and create the constraint using the index.",
      "targetType": "sql",
    },
    {
      "code": "prefer-robust-stmts",
      "column": "2",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "7",
      "linter": "squawk",
      "message": "Consider wrapping in a transaction or adding a IF NOT EXISTS clause if the statement supports it.",
      "targetType": "sql",
    },
  ],
  "lintActions": [
    {
      "command": "lint",
      "fileGroupName": "sql",
      "linter": "squawk",
      "paths": [
        "test_data/basic.in.sql",
      ],
      "verb": "TRUNK_VERB_CHECK",
    },
    {
      "command": "lint",
      "fileGroupName": "sql",
      "linter": "squawk",
      "paths": [
        "test_data/basic.in.sql",
      ],
      "upstream": true,
      "verb": "TRUNK_VERB_CHECK",
    },
  ],
  "taskFailures": [],
  "unformattedFiles": [],
}
`;
