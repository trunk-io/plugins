// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing linter squawk test basic 1`] = `
{
  "issues": [
    {
      "code": "prefer-robust-stmts",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "linter": "squawk",
      "message": "Missing \`IF NOT EXISTS\`, the migration can't be rerun if it fails part way through.",
      "targetType": "sql",
    },
    {
      "code": "prefer-bigint-over-int",
      "column": "7",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "1",
      "linter": "squawk",
      "message": "Using 32-bit integer fields can result in hitting the max \`int\` limit.",
      "targetType": "sql",
    },
    {
      "code": "prefer-identity",
      "column": "7",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "1",
      "linter": "squawk",
      "message": "Serial types make schema, dependency, and permission management difficult.",
      "targetType": "sql",
    },
    {
      "code": "prefer-text-field",
      "column": "10",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "2",
      "linter": "squawk",
      "message": "Changing the size of a \`varchar\` field requires an \`ACCESS EXCLUSIVE\` lock, that will prevent all reads and writes to the table.",
      "targetType": "sql",
    },
    {
      "code": "prefer-robust-stmts",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "5",
      "linter": "squawk",
      "message": "Missing \`IF NOT EXISTS\`, the migration can't be rerun if it fails part way through.",
      "targetType": "sql",
    },
    {
      "code": "require-concurrent-index-creation",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "5",
      "linter": "squawk",
      "message": "During normal index creation, table updates are blocked, but reads are still allowed.",
      "targetType": "sql",
    },
    {
      "code": "constraint-missing-not-valid",
      "column": "23",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "7",
      "linter": "squawk",
      "message": "By default new constraints require a table scan and block writes to the table while that scan occurs.",
      "targetType": "sql",
    },
    {
      "code": "prefer-robust-stmts",
      "column": "23",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "7",
      "linter": "squawk",
      "message": "Missing transaction, the migration can't be rerun if it fails part way through.",
      "targetType": "sql",
    },
    {
      "code": "disallowed-unique-constraint",
      "column": "27",
      "file": "test_data/basic.in.sql",
      "issueClass": "ISSUE_CLASS_EXISTING",
      "level": "LEVEL_HIGH",
      "line": "7",
      "linter": "squawk",
      "message": "Adding a \`UNIQUE\` constraint requires an \`ACCESS EXCLUSIVE\` lock which blocks reads and writes to the table while the index is built.",
      "targetType": "sql",
    },
  ],
  "lintActions": [
    {
      "command": "lint",
      "fileGroupName": "sql",
      "linter": "squawk",
      "paths": [
        "test_data/basic.in.sql",
      ],
      "verb": "TRUNK_VERB_CHECK",
    },
    {
      "command": "lint",
      "fileGroupName": "sql",
      "linter": "squawk",
      "paths": [
        "test_data/basic.in.sql",
      ],
      "upstream": true,
      "verb": "TRUNK_VERB_CHECK",
    },
  ],
  "taskFailures": [],
  "unformattedFiles": [],
}
`;
