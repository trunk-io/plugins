name: Nightly
on:
  schedule:
    # Times in UTC (PST+8), this translates to running Mon-Fri at midnight/1am (depending on DST)
    - cron: 0 8 * * 1-5
  pull_request:
    paths: [.github/workflows/nightly.yaml]
  workflow_dispatch: {}

permissions: read-all

jobs:
  # Run tests against all linters for snapshots and latest version as they exist on main
  # This job is used to diagnose plugin config health in advance of a release
  linter_tests_main:
    name: Plugin Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        linter-version: [Snapshots, Latest]
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Cache tool downloads
        uses: actions/cache@627f0f41f6904a5b1efbaed9f96d9eb58e92e920 # v3.2.4
        with:
          path: /tmp/plugins_testing_download_cache
          # No need to key on trunk version unless we change how we store downloads.
          key: trunk-${{ runner.os }}

      - name: Delete cache
        # For now, avoid deleting cache on pull request changes to nightly. This improves PR experience.
        if: env.TRIGGER != 'pull_request'
        run: |
          if [ -d "/tmp/plugins_testing_download_cache" ]
          then
            tmp_dir=/tmp/${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}
            mv "/tmp/plugins_testing_download_cache" ${tmp_dir}
            chmod -R u+w ${tmp_dir}
            rm -rf ${tmp_dir}
          fi
        shell: bash

      - name: Linter Tests
        uses: ./.github/actions/linter_tests
        with:
          linter-version: ${{ matrix.linter-version }}

  # Run tests against all linters for snapshots and latest version as they exist in latest release
  # This job is used to update the list of validated versions
  linter_tests_release:
    name: Plugin Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        linter-version: [Snapshots, Latest]
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Retrieve git history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # This assumes that any changes on main since the last release are backwards compatible
      # in terms of allowing existing linter tests to run.
      - name: Preserve test runner latest behavior
        run: |
          cp -r tests tests.bak
          cp package.json package.json.bak
          cp package-lock.json package-lock.json.bak

      - name: Get Latest Release
        id: get-release
        uses: WyriHaximus/github-action-get-previous-tag@385a2a0b6abf6c2efeb95adfac83d96d6f968e0c # v1.3.0
        with:
          # only use releases tagged v<semver>
          prefix: v

      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ steps.get-release.outputs.tag }}
          clean: false

      - name: Overwrite test runners with latest behavior
        run: |
          mv tests.bak tests
          mv package.json.bak package.json
          mv package-lock.json.bak package-lock.json

      - name: Cache tool downloads
        uses: actions/cache@627f0f41f6904a5b1efbaed9f96d9eb58e92e920 # v3.2.4
        with:
          path: /tmp/plugins_testing_download_cache
          # No need to key on trunk version unless we change how we store downloads.
          key: trunk-${{ runner.os }}

      - name: Delete cache
        # For now, avoid deleting cache on pull request changes to nightly. This improves PR experience.
        if: env.TRIGGER != 'pull_request'
        run: |
          if [ -d "/tmp/plugins_testing_download_cache" ]
          then
            tmp_dir=/tmp/${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}
            mv "/tmp/plugins_testing_download_cache" ${tmp_dir}
            chmod -R u+w ${tmp_dir}
            rm -rf ${tmp_dir}
          fi
        shell: bash

      - name: Linter Tests
        uses: ./.github/actions/linter_tests
        with:
          linter-version: ${{ matrix.linter-version }}
          append-args: -- --json --outputFile=${{ matrix.os }}-res.json

      - name: Upload Test Outputs for Upload Job
        # Only upload results from latest. Always run, except when cancelled.
        if: ${{ (failure() || success()) && matrix.linter-version == 'Latest' }}
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: ${{ matrix.os }}-test-results
          path: ${{ matrix.os }}-res.json

  upload_test_results:
    name: Upload Test Results
    needs: linter_tests_release
    runs-on: ubuntu-latest
    # Still run on test failure
    if: always()
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Retrieve Test Outputs ubuntu
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: ubuntu-latest-test-results

      - name: Retrieve Test Outputs macOS
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: macos-latest-test-results

      - name: Setup Node
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
        with:
          node-version: 18

      - name: Sync lfs
        run: git lfs pull

      - name: Install Dependencies
        run: npm ci

      - name: Parse Test Results
        run: npm run parse

      - name: Upload Test Results
        env:
          TRUNK_API_TOKEN: ${{ secrets.TRUNK_API_TOKEN }}
        # upload-linter-versions is a hidden command reserved exclusively for uploading
        # validated results from the plugins repo.
        run:
          PATH=$(npm bin):$PATH trunk upload-linter-versions --token="$TRUNK_API_TOKEN" results.json

  # Run repo healthcheck tests
  repo_tests:
    name: Repo Tests
    uses: ./.github/workflows/repo_tests.reusable.yaml
